//Recursion
#include <stdio.h>

long long int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    for (int i = 0; i < 50; i++) {
        printf("%lld ", fibonacci(i));
    }
    return 0;
}

//Loop
#include <stdio.h>

int main() {
    long long int fib[50];
    fib[0] = 0;
    fib[1] = 1;

    for (int i = 2; i < 50; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    for (int i = 0; i < 50; i++) {
        printf("%lld ", fib[i]);
    }
    return 0;
}

//Recursion & Memoization
#include <stdio.h>

long long int memo[50];

long long int fibonacci(int n) {
    if (n <= 1)
        return n;
    if (memo[n] != -1)
        return memo[n];
    memo[n] = fibonacci(n - 1) + fibonacci(n - 2);
    return memo[n];
}

int main() {
    for (int i = 0; i < 50; i++) {
        memo[i] = -1;
    }

    for (int i = 0; i < 50; i++) {
        printf("%lld ", fibonacci(i));
    }
    return 0;
}

//Loop & Memoization
#include <stdio.h>

int main() {
    long long int fib[50];

    fib[0] = 0;
    fib[1] = 1;

    for (int i = 2; i < 50; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    for (int i = 0; i < 50; i++) {
        printf("%lld ", fib[i]);
    }
    return 0;
}


//last part
//Recursion
#include <stdio.h>
#include <time.h>

long long fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    clock_t start, end;
    double cpu_time_used;

    start = clock();

    for (int i = 0; i < 50; i++) {
        printf("%lld ", fibonacci(i));
    }

    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("\nTime taken: %f seconds\n", cpu_time_used);

    return 0;
}

//Loop
#include <stdio.h>
#include <time.h>

void fibonacci(int n) {
    long long f1 = 0, f2 = 1, f;
    
    if (n >= 1) printf("%lld ", f1);
    if (n >= 2) printf("%lld ", f2);

    for (int i = 3; i <= n; i++) {
        f = f1 + f2;
        printf("%lld ", f);
        f1 = f2;
        f2 = f;
    }
}

int main() {
    clock_t start, end;
    double cpu_time_used;

    start = clock();

    fibonacci(50);

    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("\nTime taken: %f seconds\n", cpu_time_used);

    return 0;
}

//Recursion & Memoization
#include <stdio.h>
#include <time.h>

#define MAX 50

long long fib[MAX];

long long fibonacci(int n) {
    if (n <= 1)
        return n;

    if (fib[n] != -1)
        return fib[n];

    fib[n] = fibonacci(n - 1) + fibonacci(n - 2);
    return fib[n];
}

int main() {
    for (int i = 0; i < MAX; i++) fib[i] = -1;

    clock_t start, end;
    double cpu_time_used;

    start = clock();

    for (int i = 0; i < 50; i++) {
        printf("%lld ", fibonacci(i));
    }

    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("\nTime taken: %f seconds\n", cpu_time_used);

    return 0;
}

//Loop & Memoization
#include <stdio.h>
#include <time.h>

#define MAX 50

void fibonacci(int n) {
    long long fib[MAX] = {0, 1};

    for (int i = 2; i < n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    for (int i = 0; i < n; i++) {
        printf("%lld ", fib[i]);
    }
}

int main() {
    clock_t start, end;
    double cpu_time_used;

    start = clock();

    fibonacci(50);

    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("\nTime taken: %f seconds\n", cpu_time_used);

    return 0;
}
